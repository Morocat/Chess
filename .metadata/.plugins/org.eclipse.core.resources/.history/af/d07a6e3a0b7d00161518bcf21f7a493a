#include "chess_board.h"

#include "tools/editor/plugins/canvas_item_editor_plugin.h"
#include "tools/editor/editor_settings.h"

#include "scene/main/viewport.h"

#include <iostream>

/*ChessBoard::ChessBoard() {

}*/

ChessBoard::ChessBoard(EditorNode* p_editor) {
	std::cout << "New Modtest Editor" << std::endl;

	//p_editor->add_child(this);
	p_editor->get_scene_root()->add_child(this);
	_editor = p_editor;
}

String ChessBoard::getHello() {
	return "Hello from c++";
}

void ChessBoard::_bind_methods() {
	ObjectTypeDB::bind_method("get_hello", &ChessBoard::getHello());
}

/*
 const board_state = Array()
 const piece_list = Array()

 func _initialize():
 for i in range(8):
 board_state.append([])
 board_state[i].resize(8)

 static func _update_board_state():
 clear_board_state()

 for i in range(32):
 var p = piece_list[i]
 print(str("x: ", p.x, " y: ", p.y))
 board_state[p.x][p.y] = p


 static func clear_board_state():
 for x in range(8):
 board_state[x].clear()
 board_state[x].resize(8)

 func _create_pieces():
 for i in range(8):
 piece_list.append(Pawn.new())

 for i in range(2):
 piece_list.append(Bishop.new())

 for i in range(2):
 piece_list.append(Knight.new())

 for i in range(2):
 piece_list.append(Rook.new())

 piece_list.append(Queen.new())
 piece_list.append(King.new())

 for i in range(16):
 piece_list[i].color = Piece.WHITE

 for i in range(8):
 piece_list.append(Pawn.new())

 for i in range(2):
 piece_list.append(Bishop.new())

 for i in range(2):
 piece_list.append(Knight.new())

 for i in range(2):
 piece_list.append(Rook.new())

 piece_list.append(Queen.new())
 piece_list.append(King.new())

 for i in range(16, 32):
 piece_list[i].color = Piece.BLACK



 func _reset():
 # pawns
 for j in range(0, 17, 16):
 for i in range(8):
 piece_list[i + j].x = i

 for i in range(0, 17, 16):
 # bishops
 piece_list[8 + i].x = 2
 piece_list[9 + i].x = 5

 # knights
 piece_list[10 + i].x = 1
 piece_list[11 + i].x = 6

 # rooks
 piece_list[12 + i].x = 0
 piece_list[13 + i].x = 7

 # king/queen
 piece_list[14 + i].x = 3
 piece_list[15 + i].x = 4

 # White
 for i in range(8):
 piece_list[i].y = 6
 for i in range(8, 16):
 piece_list[i].y = 7

 #Black
 for i in range(16, 24):
 piece_list[i].y = 1
 for i in range(24, 32):
 piece_list[i].y = 0

 for i in range(32):
 if (i < 16):
 piece_list[i].color = Piece.WHITE
 else:
 piece_list[i].color = Piece.BLACK

 */
