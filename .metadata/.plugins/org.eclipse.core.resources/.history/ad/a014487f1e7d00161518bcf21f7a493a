#include "chess_board.h"

#include <iostream>

ChessBoard::ChessBoard() {

 }

String ChessBoard::getHello() {
	return "Hello from c++";
}

void ChessBoard::_bind_methods() {
	ObjectTypeDB::bind_method("get_hello", &ChessBoard::getHello);
}

void ChessBoard::clearBoardState() {
	for (char i = 0; i < 8; i++)
		for (char j = 0; j < 8; j++)
			boardState[i][j] = 0;
}

void ChessBoard::updateBoardState() {
	clearBoardState();
	for (Piece *p : pieceList) {
		boardState[p->x][p->y] = p;
	}
}

void ChessBoard::createPieces() {
	for (char c = 0; c < 17; c += 16)
		for (char i = 0; i < 8; i++) {
			pieceList[i + c] = new Pawn();
		}
	for (char c = 0; c < 17; c += 16)
		for (char i = 0; i < 2; i++) {
			pieceList[i + c] = new Bishop();
		}
	for (char c = 0; c < 17; c += 16)
		for (char i = 0; i < 2; i++) {
			pieceList[i + c] = new Knight();
		}
	for (char c = 0; c < 17; c += 16)
		for (char i = 0; i < 2; i++) {
			pieceList[i + c] = new Rook();
		}

}

void ChessBoard::resetPieces() {

}

/*
func _create_pieces():
	for i in range(8):
		piece_list.append(Pawn.new())

	for i in range(2):
		piece_list.append(Bishop.new())

	for i in range(2):
		piece_list.append(Knight.new())

	for i in range(2):
		piece_list.append(Rook.new())

	piece_list.append(Queen.new())
	piece_list.append(King.new())

	for i in range(16):
		piece_list[i].color = Piece.WHITE

	for i in range(8):
		piece_list.append(Pawn.new())

	for i in range(2):
		piece_list.append(Bishop.new())

	for i in range(2):
		piece_list.append(Knight.new())

	for i in range(2):
		piece_list.append(Rook.new())

	piece_list.append(Queen.new())
	piece_list.append(King.new())

	for i in range(16, 32):
		piece_list[i].color = Piece.BLACK



func _reset():
	# pawns
	for j in range(0, 17, 16):
		for i in range(8):
			piece_list[i + j].x = i

	for i in range(0, 17, 16):
		# bishops
		piece_list[8 + i].x = 2
		piece_list[9 + i].x = 5

		# knights
		piece_list[10 + i].x = 1
		piece_list[11 + i].x = 6

		# rooks
		piece_list[12 + i].x = 0
		piece_list[13 + i].x = 7

		# king/queen
		piece_list[14 + i].x = 3
		piece_list[15 + i].x = 4

	# White
	for i in range(8):
		piece_list[i].y = 6
	for i in range(8, 16):
		piece_list[i].y = 7

	#Black
	for i in range(16, 24):
		piece_list[i].y = 1
	for i in range(24, 32):
		piece_list[i].y = 0

	for i in range(32):
		if (i < 16):
			piece_list[i].color = Piece.WHITE
		else:
			piece_list[i].color = Piece.BLACK

 *
 */
